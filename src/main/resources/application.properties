# =======================================
#      PostgreSQL Configuration
# =======================================
# Ensure this database exists and that the credentials are correct.
spring.datasource.url=jdbc:postgresql://localhost:5432/NexusPrism
spring.datasource.username=postgres
spring.datasource.password=1234
spring.datasource.driver-class-name=org.postgresql.Driver

# =======================================
#      JPA / Hibernate Configuration
# =======================================
# 'validate' checks the schema on startup. 'update' can modify it. 'validate' is safer.
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# =======================================
#      Ollama AI Service Configuration
# =======================================
# CRITICAL: This is the most likely source of the 500 Internal Server Error.
# 'localhost' only works if Ollama and this app are running on the same machine (not in separate containers).
# If Ollama is in Docker, you might need 'http://host.docker.internal:11434' or the container's IP.
ollama.base-url=http://localhost:11434

# CRITICAL: Ensure this exact model is available on your Ollama server.
# Run 'ollama list' in your terminal to verify.
ollama.model=llama3.2:3b

# The time in seconds to wait for a response from the AI model.
ollama.timeout=60

# =======================================
#      Server Configuration
# =======================================
server.port=8080

# =======================================
#      Logging Configuration
# =======================================
# CORRECTED: The package path now correctly points to your application's code.
logging.level.com.llama.chatbot=DEBUG

# These are helpful for seeing the exact SQL being run by Hibernate.
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE